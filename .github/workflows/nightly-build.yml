name: Nightly Build

on:
  push:
    branches:
      - main

  # on:
  #   schedule:
  #     - cron: '00 22 * * *'  # Runs at UTC every day

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up environment file
        run: cp .env.example .env

      - name: Set up QEMU (for multi-platform builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker Buildx
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: docker-buildx-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            docker-buildx-${{ runner.os }}-

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Multi-Platform Docker Image
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M)
          IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/my-python-app:nightly-${TIMESTAMP}

          docker buildx build \
            --pull \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --push \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new \
            -t $IMAGE_TAG .

      - name: Move Cache (for next builds)
        run: |
          if [ -d "/tmp/.buildx-cache-new" ]; then
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          fi

      - name: Build and Start Services
        run: docker compose --env-file .env up -d --build

      - name: Find Web Container Name
        id: find_container
        run: echo "CONTAINER_NAME=$(docker ps --filter 'name=web' --format '{{.Names}}')" >> $GITHUB_ENV

      - name: Wait for Database to Be Ready
        run: |
          until docker compose exec -T db pg_isready -U myuser; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 3
          done

      - name: Debug Running Containers
        run: |
          docker ps -a
          docker logs fastapi-beyond-crud-web-1
          docker logs fastapi-beyond-crud-celery-1

      - name: Run Database Migrations
        run: docker exec $CONTAINER_NAME alembic upgrade head

      - name: Run Tests Inside Docker
        run: |
          docker exec $CONTAINER_NAME pip install pytest
          docker exec $CONTAINER_NAME pytest
        continue-on-error: false  # Fails if tests fail

  notify-on-failure:
    needs: build-and-test
    if: failure()
    uses: ./.github/workflows/send-email.yml
    with:
      recipient: "your-email@example.com"
      subject: "Nightly Build Failed"
      text: "The nightly build for ${{ github.repository }} has failed. Please check the logs."
    secrets:
      ETHEREAL_EMAIL: ${{ secrets.ETHEREAL_EMAIL }}
      ETHEREAL_PASSWORD: ${{ secrets.ETHEREAL_PASSWORD }}